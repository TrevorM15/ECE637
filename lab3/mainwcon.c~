
#include <math.h>
#include <stdlib.h>
#include <stddef.h>
#include "tiff.h"
#include "allocate.h"
#include "typeutil.h"

void error(char *name);

typedef struct pixel pixel;

  struct pixel{
    int m,n;
  };
  
void connectedNeighbors(pixel s,double T,unsigned char **img,int width,int height, int *M,pixel c[4]) {
  int j;

  
  int count = 0;
  
  if (fabs(img[s.m][s.n]-img[s.m-1][s.n])<=T && s.m-1 >0){
      count++;
      c[0].m,c[0].n=s.m-1, s.n;
    }
if (fabs(img[s.m][s.n]-img[s.m+1][ s.n])<=T && s.m+1<width){
        count++;
	 c[1].m,c[1].n=s.m+1, s.n;
    }
if (fabs(img[s.m][s.n]-img[s.m][ s.n-1])<=T && s.n-1 >0){
        count++;
	 c[2].m,c[2].n=s.m, s.n-1;
    }
if (fabs(img[s.m][s.n]-img[s.m][ s.n+1])<=T && s.n+1<height){
        count++;
	 c[3].m,c[3].n=s.m, s.n+1;
    }
  *M =count;
}

void connectedSet( pixel s,double T,unsigned char **img,int width,int height,int ClassLabel,unsigned int **seg,int *NumConPixels){
  int i,j,*M;
  pixel c[4];
  int B[width*height][2];
  for (i = 0; i<width*height;i++)
    for(j =0; j<2; j++){
      B[i][j]=-1;
    }
    for(j=0;j<4;j++){
    c[j].m = -1;
    c[j].n=-1;
  }
    M=0;
  i=0;
  j = i;
  B[i][0]= s.m;
  B[i][1]=s.n;
  while (B[j][0] !=-1){
    void connectedNeighbors(pixel s,
			double T,
			unsigned char **img,
			int width,
			int height,
			int *M,
			    pixel c[4]);

    
    if(c[0].m != -1  && seg[s.m-1][ s.n]==0){
      seg[s.m-1][s.n]=ClassLabel;
	i++;
	B[i][0]=s.m-1;
	B[i][1]=s.n;
    }
    if (c[1].m != -1 && seg[s.m+1][ s.n]==0){
      seg[s.m+1][s.n]=ClassLabel;
        i++;
	B[i][0]=s.m+1;
	B[i][1]=s.n;
    }
    if( c[2].m !=-1 && seg[s.m][ s.n-1]==0){
      seg[s.m][s.n-1]=ClassLabel;
	i++;
	B[i][0]=s.m;
	B[i][1]=s.n-1;
    }
    if (c[3].m !=-1 && seg[s.m][ s.n+1]==0){
        seg[s.m][s.n+1]=ClassLabel;
	i++;
	B[i][0]=s.m;
	B[i][1]=s.n+1;
    }
    B[j][0], B[j][1]= -1,-1;
    j++;
    s.m=B[j][0];
    s.n=B[j][1];
    *NumConPixels += *M;
  }

}

int main (int argc, char **argv) 
{
  FILE *fp;
  struct TIFF_img input_img, Y;
  double **img;

  int32_t i,j;
  int ClassLabel = 1;
  int T =1;
  int *M;
  
  unsigned int **seg;
  typedef struct pixel pixel;

  struct pixel{
    int m,n;
  };

  pixel s,c[4];
  s.m=67;
  s.n=45;
  for(i=0;i<4;i++){
    c[i].m=0;
    c[i].n=0;
  }


  if ( argc != 2 ) error( argv[0] );
  /* open image file */

   if ( ( fp = fopen ( argv[1], "rb" ) ) == NULL ) {
    fprintf ( stderr, "cannot open file %s\n", argv[1] );
    exit ( 1 );
  }
 
  /* read image */

  if ( read_TIFF ( fp, &input_img ) ) {
    fprintf ( stderr, "error reading file %s\n", argv[1] );
    exit ( 1 );
  }

  /* close image file */

  fclose ( fp );

  /* check the type of image data */

  if ( input_img.TIFF_type != 'g' ) {
    fprintf ( stderr, "error:  image must be grayscale\n" );
    exit ( 1 );
  }

  /* Allocate image of double precision floats */
 img = (double **)get_img(input_img.width,input_img.height,sizeof(double));
 seg = (unsigned int **)malloc(input_img.height*sizeof(unsigned int));
  for (i=0; i<input_img.width;i++){
    seg[i] = (unsigned int *)malloc(input_img.width*sizeof(unsigned int));
  }
    /* copy img  to double array */
  for ( i = 0; i < input_img.height; i++ )
  for ( j = 0; j < input_img.width; j++ ) {
    img[i][j] = input_img.mono[i][j];
    seg[i][j]=0;
  }




  
  /* TODO: write connectedneighbors and connected sets*/







  /* set up structure for output color image */
  /* Note that the type is 'c' rather than 'g' */
  get_TIFF ( &Y, input_img.height, input_img.width, 'g' );
  
  
  /* open Y image file */
  if ( ( fp = fopen ( "Y.tif", "wb" ) ) == NULL ) {
    fprintf ( stderr, "cannot open file Y.tif\n");
    exit ( 1 );
  }

  /* write Y image */
  if ( write_TIFF ( fp, &Y ) ) {
    fprintf ( stderr, "error writing TIFF file %s\n", argv[2] );
    exit ( 1 );
  }

  /* close Y image file */
  fclose ( fp );
    
    

  /* de-allocate space which was used for the images */
  free_TIFF ( &(input_img) );
  free_TIFF ( &(Y) );

  
  free_img( (void**)img );
    

  return(0);
}

void error(char *name)
{
    printf("usage:  %s  image.tiff \n\n",name);
    printf("this program reads in a 24-bit color TIFF image.\n");
    exit(1);
}

